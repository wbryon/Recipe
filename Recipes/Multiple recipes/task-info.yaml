type: edu
files:
- name: src/recipes/RecipesApplication.java
  visible: true
  text: |
    package recipes;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class RecipesApplication {
        public static void main(String[] args) {
            SpringApplication.run(RecipesApplication.class, args);
        }
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=8881
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    buildscript {
        apply plugin: 'hyperskill'

        repositories {
            mavenCentral()
        }
        dependencies {
            classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
            classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
        }
    }

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
    }
  learner_created: false
- name: test/RecipesApplicationTest.java
  visible: false
  text: |
    import com.google.gson.Gson;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;
    import static org.hyperskill.hstest.testing.expect.Expectation.expect;

    import recipes.RecipesApplication;

    import java.util.ArrayList;
    import java.util.List;

    import static org.hyperskill.hstest.testcase.CheckResult.correct;


    public class RecipesApplicationTest extends SpringTest {

        public RecipesApplicationTest() {
            super(RecipesApplication.class);
        }

        // Initialization ---

        static class Recipe {
            final String name;
            final String description;
            final String[] ingredients;
            final String[] directions;

            Recipe(String name, String description, String[] ingredients, String[] directions) {
                this.name = name;
                this.description = description;
                this.ingredients = ingredients;
                this.directions = directions;
            }
        }

        final Recipe[] RECIPES = {
            new Recipe(
                "Fresh Mint Tea /Test",
                "Light, aromatic and refreshing beverage, ... /Test",
                new String[]{"boiled water", "honey", "fresh mint leaves /Test"},
                new String[]{"Boil water", "Pour boiling hot water into a mug", "Add fresh mint leaves", "Mix and let the mint leaves seep for 3-5 minutes", "Add honey and mix again /Test"}
            ),

            new Recipe(
                "Warming Ginger Tea /Test",
                "Ginger tea is a warming drink for cool weather, ... /Test",
                new String[]{"1 inch ginger root, minced", "1/2 lemon, juiced", "1/2 teaspoon manuka honey /Test"},
                new String[]{"Place all ingredients in a mug and fill with warm water (not too hot so you keep the beneficial honey compounds in tact)", "Steep for 5-10 minutes", "Drink and enjoy /Test"}
            )
        };

        final String[] JSON_RECIPES = {
            new Gson().toJson(RECIPES[0]),
            new Gson().toJson(RECIPES[1])
        };


        final String API_RECIPE_NEW = "/api/recipe/new";
        final String API_RECIPE = "/api/recipe/";

        // recipes ids will be saved when testing POST requests and used later to test GET requests
        final List<Integer> recipeIds = new ArrayList<>();


        // Helper functions ---

        static void throwIfIncorrectStatusCode(HttpResponse response, int status) {
            if (response.getStatusCode() != status) {
                throw new WrongAnswer(response.getRequest().getMethod() +
                    " " + response.getRequest().getLocalUri() +
                    " should respond with status code " + status +
                    ", responded: " + response.getStatusCode() + "\n\n" +
                    "Response body:\n" + response.getContent());
            }
        }


        // Tests ---

        @DynamicTest
        DynamicTesting[] dt = new DynamicTesting[]{
            this::testGetRecipeNotFoundStatusCode,

            () -> testPostRecipe(JSON_RECIPES[0]),
            () -> testPostRecipe(JSON_RECIPES[1]),

            () -> testGetRecipe(recipeIds.get(0), RECIPES[0]),
            () -> testGetRecipe(recipeIds.get(1), RECIPES[1])
        };

        CheckResult testPostRecipe(String jsonRecipe) {

            HttpResponse response = post(API_RECIPE_NEW, jsonRecipe).send();

            throwIfIncorrectStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("id", isInteger(recipeId -> {
                        recipeIds.add(recipeId);
                        return true;
                    })));

            return correct();
        }

        CheckResult testGetRecipe(int recipeId, Recipe recipe) {

            HttpResponse response = get(API_RECIPE + recipeId).send();

            throwIfIncorrectStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("name", isString(recipe.name))
                    .value("description", isString(recipe.description))
                    .value("ingredients", isArray(recipe.ingredients))
                    .value("directions", isArray(recipe.directions)));

            return correct();
        }

        CheckResult testGetRecipeNotFoundStatusCode() {
            HttpResponse response = get(API_RECIPE + (Integer.MAX_VALUE - 5)).send();

            throwIfIncorrectStatusCode(response, 404);

            return correct();
        }
    }
  learner_created: false
- name: src/recipes/recipe/Recipe.java
  visible: true
  text: |-
    package recipes.recipe;

    import lombok.AllArgsConstructor;
    import lombok.Data;
    import lombok.NoArgsConstructor;
    import org.springframework.web.bind.annotation.RestController;

    @Data
    @AllArgsConstructor
    @NoArgsConstructor(force = true)
    @RestController
    public class Recipe {

        private String name;
        private String description;
        private String ingredients;
        private String directions;

    }
  learner_created: true
- name: src/recipes/recipe/RecipeController.java
  visible: true
  text: |-
    package recipes.recipe;

    import org.springframework.web.bind.annotation.*;

    import java.util.List;

    @RestController
    @RequestMapping("/api/recipe")
    public class RecipeController {
        Recipe currentRecipe = new Recipe();
        @PostMapping
        public void postRecipe(@RequestBody Recipe newRecipe) { currentRecipe = newRecipe; }
        @GetMapping()
        public Recipe getRecipe() { return currentRecipe; }
    }
  learner_created: true
- name: src/recipes/recipe/RecipeNotFoundException.java
  visible: true
  learner_created: true
- name: src/recipes/Main.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/13089#comment
status: Failed
feedback:
  message: |-
    Wrong answer in test #1

    GET /api/recipe/2147483642 should respond with status code 404, responded: 200

    Response body:

    Please find below the output of your program during this failed test.

    ---

    .   ____          _            __ _ _
     /\\ / ___&#39;_ __ _ _(_)_ __  __ _ \ \ \ \
    ( ( )\___ | &#39;_ | &#39;_| | &#39;_ \/ _` | \ \ \ \
     \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
      &#39;  |____| .__|_| |_|_| |_\__, | / / / /
     =========|_|==============|___/=/_/_/_/
     :: Spring Boot ::                (v2.5.6)

    2022-07-14 22:59:09.382  INFO 1580 --- [    Test worker] recipes.RecipesApplication               : Starting RecipesApplication using Java 17.0.2 on KHABIB with PID 1580 (started by habib in C:\Users\habib\Downloads\Recipes\Recipes\task)
    2022-07-14 22:59:09.382  INFO 1580 --- [    Test worker] recipes.RecipesApplication               : No active profile set, falling back to default profiles: default
    2022-07-14 22:59:11.160  INFO 1580 --- [    Test worker] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8881 (http)
    2022-07-14 22:59:11.160  INFO 1580 --- [    Test worker] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
    2022-07-14 22:59:11.160  INFO 1580 --- [    Test worker] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.54]
    2022-07-14 22:59:11.276  INFO 1580 --- [    Test worker] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
    2022-07-14 22:59:11.276  INFO 1580 --- [    Test worker] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1805 ms
    2022-07-14 22:59:12.226  INFO 1580 --- [    Test worker] o.s.b.a.e.web.EndpointLinksResolver      : Exposing 14 endpoint(s) beneath base path &#39;/actuator&#39;
    2022-07-14 22:59:12.295  INFO 1580 --- [    Test worker] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8881 (http) with context path &#39;&#39;
    2022-07-14 22:59:12.310  INFO 1580 --- [    Test worker] recipes.RecipesApplication               : Started RecipesApplication in 3.454 seconds (JVM running for 4.407)
    2022-07-14 22:59:12.765  INFO 1580 --- [nio-8881-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet &#39;dispatcherServlet&#39;
    2022-07-14 22:59:12.765  INFO 1580 --- [nio-8881-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet &#39;dispatcherServlet&#39;
    2022-07-14 22:59:12.765  INFO 1580 --- [nio-8881-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 0 ms
  time: Thu, 14 Jul 2022 19:59:13 UTC
record: 2
